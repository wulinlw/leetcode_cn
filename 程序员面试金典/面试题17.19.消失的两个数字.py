# #!/usr/bin/python
# #coding:utf-8
# 
# 面试题17.19.消失的两个数字
# 
# https://leetcode-cn.com/problems/missing-two-lcci/
# 
# 给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？
# 以任意顺序返回这两个数字均可。
# 
# 示例 1:
# 
# 输入: [1]
# 输出: [2,3]
# 
# 示例 2:
# 
# 输入: [2,3]
# 输出: [1,4]
# 
# 提示：
# 
# 
# 	nums.length <= 30000
# 
# 
# 
# Hard 54.8%
# Testcase Example: [1]
# 
# 提示:
# 从第一部分开始：如果只缺少一个数字，那么找到它。
# 第1部分：如果你必须在O(1)的空间复杂度和O(N)的时间复杂度下找到丢失的数字，那么只能在数组中执行常数次遍历，并且只能存储少许变量。
# 第1部分：如果将数组中的所有值相加会怎么样？然后你能算出缺失的数字吗？
# 第2部分：我们现在正在寻找两个缺失的数字，可以称其为a和b。第1部分中的计算方法将告诉我们a和b的和，但它实际上不会告诉我们a和b。还需要做什么计算？
# 第2部分：有很多不同的计算方法可以试一试。例如，可以把所有的数都相乘，但这只会得到a和b的乘积。
# 第2部分：把数字加在一起会得到a + b的结果。把数字相乘会得到a × b的结果。怎样才能得到a和b的确切值？
# 第2部分：我们可以两者都计算。如果知道a + b = 87，a×b = 962，那么就解出a和b : a = 13且b = 74。但这也将导致必须对非常大的数相乘。所有数的乘积可以大于10^157。还有更简单的计算方法吗？
# 第2部分：几乎任何我们能想到的“方程”都可以用在这里（只要它和线性和不等价）。只要保持这个和很小就可以。
# 第2部分：试着求所有值的平方的和。
# 第2部分：你可能需要二次公式。如果你不记得也没什么大不了的，大多数人都不会记得。知道二次公式的存在即可。
# 
# 
from typing import List
class Solution:
    # 260. 只出现一次的数字 III   类似
    def missingTwo(self, nums: List[int]) -> List[int]:
        x = 0
        for i in nums:                      #补全这个数组+原数组， 变成找2个只出现一次的数,这样写不占用新的空间
            x ^= i
        for j in range(1, len(nums)+2+1):   #完整长度是+2个，包含第二个+1
            x ^= j

        right1 = x & -x                     #取到二进制中最右侧的1
        # print("{:0>32b}".format(right1))

        a = 0
        for i in nums:                      #和原来的数据在异或得到缺少的数
            if i & right1:
                a ^= i
        for i in range(1, len(nums)+2+1):
            if i & right1:
                a ^= i
        return [a, a^x]                     #第二个数在和x ^一下


nums = [1]
nums = [2,3]
o = Solution()
print(o.missingTwo(nums))

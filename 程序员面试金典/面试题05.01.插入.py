# #!/usr/bin/python
# #coding:utf-8
# 
# 面试题05.01.插入
# 
# https://leetcode-cn.com/problems/insert-into-bits-lcci/
# 
# 插入。给定两个32位的整数N与M，以及表示比特位置的i与j。编写一种方法，将M插入N，使得M从N的第j位开始，到第i位结束。假定从j位到i位足以容纳M，也即若M = 10 011，那么j和i之间至少可容纳5个位。例如，不可能出现j = 3和i = 2的情况，因为第3位和第2位之间放不下M。
#  示例1:
# 
# 
#  输入：N = 10000000000, M = 10011, i = 2, j = 6
#  输出：N = 10001001100
# 
# 
#  示例2:
# 
# 
#  输入： N = 0, M = 11111, i = 0, j = 4
#  输出：N = 11111
# 
# 
# 
# Easy 47.7%
# Testcase Example: 1024
# 19
# 2
# 6
# 
# 提示:
# 把这个分成几个部分。先将精力放在清除适当的位上。
# 要清除这些位，创建一个看起来像是一系列1，然后是0，然后是1的“位掩码”。
# 在开始或结束时很容易创建一个0的位掩码。但是，有一堆0时，你如何在中间创建一个零位掩码？简单的做法是，为左侧创建一个位掩码，然后为右侧创建一个位掩码。然后你可以合并两边。
# 
# 

class Solution:
    def insertBits(self, N: int, M: int, i: int, j: int) -> int:
        t = 0
        for x in range(i, j+1):     #构造t，使t的i到j之间为1，其余为0；0000...111...000
            t = t|(1<<x)
        t = ~t                      #取反t，1111...000...111
        N = N&t                     #N的i-j就变为0了
        M = M<<i                    #M左移i，然后和N或操作，有1为1
        return N|M

N = 10000000000
M = 10011
i = 2
j = 6
o = Solution()
print(o.insertBits(N,M,i,j))
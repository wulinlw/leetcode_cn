# #!/usr/bin/python
# #coding:utf-8
# 
# 面试题16.10.生存人数
# 
# https://leetcode-cn.com/problems/living-people-lcci/
# 
# 给定N个人的出生年份和死亡年份，第i个人的出生年份为birth[i]，死亡年份为death[i]，实现一个方法以计算生存人数最多的年份。
# 你可以假设所有人都出生于1900年至2000年（含1900和2000）之间。如果一个人在某一年的任意时期都处于生存状态，那么他们应该被纳入那一年的统计中。例如，生于1908年、死于1909年的人应当被列入1908年和1909年的计数。
# 如果有多个年份生存人数相同且均为最大值，输出其中最小的年份。
# 示例：
# 输入：
# birth = {1900, 1901, 1950}
# death = {1948, 1951, 2000}
# 输出： 1901
# 
# 提示：
# 
# 0 
# birth[i] 
# 
# 
# 
# Medium 65.6%
# Testcase Example: [1972,1908,1915,1957,1960,1948,1912,1903,1949,1977,1900,1957,1934,1929,1913,1902,1903,1901]
# [1997,1932,1963,1997,1983,2000,1926,1962,1955,1997,1998,1989,1992,1975,1940,1903,1983,1969]
# 
# 提示:
# 方案 1：你能计算出每年有多少人活着吗？
# 方案1：用散列表或数组试试，将出生年份映射到该年还有多少人活着。
# 解法2：如果对年份排序会如何？你会根据什么排序？
# 解法2：你真的有必要匹配出生年份和死亡年份吗？当一个特定的人死了，会有什么关系，或者你只是需要一份死亡年份的清单？
# 解法2：观察到人是“可替代的”，不管谁出生，何时死亡。你需要的只是一份出生年份和死亡年份的列表。这可能会使你对人员列表的排序变得更加容易。
# 解法2：尝试创建一份排序的出生列表和一份排序的死亡列表。通过遍历两个列表，你能追踪任意时间活着的人的数量吗？
# 每个出生增加一个人，每个死亡移除一个人。尝试编写一份人员列表（出生年份和死亡年份）示例，然后将其重新格式化为每年的列表，出生时加1，死亡时减1。
# 解法3：如果你创建了一个年份数组并保存每个年份的人口变化会如何？你能找到人口最多的那一年吗?
# 解法3：注意这个问题中的细节。你的算法/代码是否考虑一个在出生的同一年去世的人？这个人应该被计算为人口总数中的一人。
# 
# 
from typing import List
class Solution:
    #前缀和
    def maxAliveYear(self, birth: List[int], death: List[int]) -> int:
        bucket = [0] * 102
        for i in range(len(birth)):     
            bucket[birth[i] - 1900] += 1        #当年出生人数
            bucket[death[i] - 1900 + 1] -= 1    #当年死亡人数，死亡当年也算出生了，在下一年减掉，所以+1

        maxval, re = 0, 0
        for i in range(1, len(bucket)):
            bucket[i] += bucket[i-1]            #前缀和
            if bucket[i] > maxval:              #最大值，更新记录
                maxval = bucket[i]
                re = i
        return 1900 + re

birth = [1900, 1901, 1950]
death = [1948, 1951, 2000]
o = Solution()
print(o.maxAliveYear(birth, death))